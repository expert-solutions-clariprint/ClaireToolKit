//*********************************************************************
//* Db                                                Sylvain Benilan *
//* Copyright (C) 2000 - 2003 xl. All Rights Reserved                 *
//*********************************************************************

// SQL type absraction
SQL_TYPES[t:integer, driver:integer] : string := "**** UNKNOWN SQL TYPE ****"

// SQL type as integer (the ODBC convention)
claire/SQL_CHAR            ::	1
claire/SQL_NUMERIC         ::	2
claire/SQL_DECIMAL         ::	3
claire/SQL_INTEGER         ::	4
claire/SQL_SMALLINT        ::	5
claire/SQL_FLOAT           ::	6
claire/SQL_REAL            ::	7
claire/SQL_DOUBLE          ::	8
claire/SQL_TEXT			::	9
claire/SQL_BLOB	       	::	11
claire/SQL_VARCHAR       	::	12
claire/SQL_AUTOINCREMENT	::	13
claire/SQL_QUOTEREPLACEMENT ::	14
claire/SQL_ANTISLASHREPLACEMENT ::	15
claire/SQL_SEQUENCE		:: -1

claire/SQL_TIMESTAMP			::	20
claire/SQL_TIMESTAMP_FORMAT	::	21 //bbn have to be SQL_TIMESTAMP + 1

claire/SQL_DATE				::	22
claire/SQL_DATE_FORMAT			::	23

claire/SQL_TIME				::	24
claire/SQL_TIME_FORMAT			::	25

claire/SQL_DATE_TYPE :: {SQL_TIMESTAMP,SQL_DATE,SQL_TIME}
claire/SQL_ALL_TYPES		:: (-1 .. 30)   //{SQL_CHAR, SQL_NUMERIC, SQL_DECIMAL, SQL_INTEGER, SQL_SMALLINT, SQL_FLOAT, SQL_REAL, SQL_DOUBLE, SQL_TEXT, SQL_VARCHAR, SQL_TIMESTAMP, SQL_BLOB, SQL_SEQUENCE}

claire/SQL_PASSWORD :: 50


[sqlType(c:Column, driver:integer) : string
 -> replace(replace(SQL_TYPES[c.sqlDataType, driver],"~P",string!(c.sqlPrecision)), "~D", string!(c.sqlDigits))]

[sqlType(c:SQL_ALL_TYPES, driver:integer, prec:integer, digit:integer) : string
 -> replace(replace(SQL_TYPES[c, driver],"~P",string!(prec)), "~D", string!(digit))]

// quoted types
private/SQL_QUOTE[t:integer] : boolean := false

[quote?(self:SQL_ALL_TYPES) : boolean => SQL_QUOTE[self]]
[quote!(self:any, sqlt:SQL_ALL_TYPES) : string -> 
	when x := self in
		(if quote?(sqlt) "'" /+ (if (self % string) self else string!(self)) /+ "'"
		else (if (self % string) (self as string) else string!(self))) else "NULL"]

[quote?(self:Column) : boolean => SQL_QUOTE[self.sqlDataType]]
[blob?(self:Column) : boolean => self.sqlDataType = SQL_BLOB]

// Quoted types
(SQL_QUOTE[SQL_CHAR] := true,
SQL_QUOTE[SQL_VARCHAR] := true)

// drivers
// sql types are strings function of (~P, ~D)
// at runtime we replace (~P, ~D) by (column precision, column digits)

// ODBC
claire/ODBC :: 0
(SQL_TYPES[SQL_CHAR,ODBC]				:=	"CHAR(~P)",
SQL_TYPES[SQL_NUMERIC,ODBC]				:=	"NUMERIC(~P,~D)",
SQL_TYPES[SQL_DECIMAL,ODBC]				:=	"DECIMAL(~P,~D)",
SQL_TYPES[SQL_INTEGER,ODBC]				:=	"INTEGER",
SQL_TYPES[SQL_SMALLINT,ODBC]			:=	"SMALLINT",
SQL_TYPES[SQL_FLOAT,ODBC]				:=	"FLOAT(~P)",
SQL_TYPES[SQL_REAL,ODBC]				:=	"REAL",
SQL_TYPES[SQL_DOUBLE,ODBC]				:=	"DOUBLE PRECISION",
SQL_TYPES[SQL_TEXT,ODBC]				:=	"TEXT",
SQL_TYPES[SQL_BLOB,ODBC]				:=	"BLOB",
SQL_TYPES[SQL_TIMESTAMP,ODBC]			:=	"DATETIME",
SQL_TYPES[SQL_VARCHAR,ODBC]				:=	"VARCHAR(~P)",
SQL_TYPES[SQL_QUOTEREPLACEMENT,ODBC]	:=	"''",
SQL_TYPES[SQL_ANTISLASHREPLACEMENT,ODBC]	:=	"\\")

// ORACLE
claire/ORACLE :: 1
(SQL_TYPES[SQL_CHAR,ORACLE]				:=	"CHAR(~P)",
SQL_TYPES[SQL_NUMERIC,ORACLE]			:=	"NUMERIC(~P,~D)",
SQL_TYPES[SQL_DECIMAL,ORACLE]			:=	"DECIMAL(~P,~D)",
SQL_TYPES[SQL_INTEGER,ORACLE]			:=	"INTEGER",
SQL_TYPES[SQL_SMALLINT,ORACLE]			:=	"SMALLINT",
SQL_TYPES[SQL_FLOAT,ORACLE]				:=	"FLOAT(~P)",
SQL_TYPES[SQL_REAL,ORACLE]				:=	"REAL",
SQL_TYPES[SQL_DOUBLE,ORACLE]			:=	"DOUBLE PRECISION",
SQL_TYPES[SQL_TEXT,ORACLE]				:=	"TEXT",
SQL_TYPES[SQL_BLOB,ORACLE]				:=	"BLOB",
SQL_TYPES[SQL_TIMESTAMP,ORACLE]			:=	"DATETIME",
SQL_TYPES[SQL_VARCHAR,ORACLE]			:=	"VARCHAR2(~P)",
SQL_TYPES[SQL_SEQUENCE, ORACLE]			:=	"",
SQL_TYPES[SQL_QUOTEREPLACEMENT,ORACLE]	:=	"''",
SQL_TYPES[SQL_ANTISLASHREPLACEMENT,ORACLE]	:=	"\\")

// ACCESS
claire/ACCESS :: 2
(SQL_TYPES[SQL_CHAR,ACCESS]				:=	"CHAR(~P)",
SQL_TYPES[SQL_NUMERIC,ACCESS]			:=	"INTEGER",
SQL_TYPES[SQL_DECIMAL,ACCESS]			:=	"INTEGER",
SQL_TYPES[SQL_INTEGER,ACCESS]			:=	"INTEGER",
SQL_TYPES[SQL_SMALLINT,ACCESS]			:=	"INTEGER",
SQL_TYPES[SQL_FLOAT,ACCESS]				:=	"DOUBLE",
SQL_TYPES[SQL_REAL,ACCESS]				:=	"REAL",
SQL_TYPES[SQL_DOUBLE,ACCESS]			:=	"DOUBLE",
SQL_TYPES[SQL_VARCHAR,ACCESS]			:=	"VARCHAR(~P)",
SQL_TYPES[SQL_TEXT,ACCESS]				:=	"TEXT",
SQL_TYPES[SQL_BLOB,ACCESS]				:=	"MEMO",
SQL_TYPES[SQL_TIMESTAMP,ACCESS]			:=	"DATETIME",
SQL_TYPES[SQL_AUTOINCREMENT, ACCESS]	:= "COUNTER",
SQL_TYPES[SQL_QUOTEREPLACEMENT,ACCESS]	:=	"''",
SQL_TYPES[SQL_ANTISLASHREPLACEMENT,ACCESS]	:=	"\\",

SQL_TYPES[SQL_TIMESTAMP,ACCESS]			:=	"DATETIME",
SQL_TYPES[SQL_TIMESTAMP_FORMAT,ACCESS]	:=	"'%Y-%m-%d %H:%M:%S'",

SQL_TYPES[SQL_DATE,ACCESS]			:=	"DATETIME",
SQL_TYPES[SQL_DATE_FORMAT,ACCESS]	:=	"'%Y-%m-%d'",

SQL_TYPES[SQL_TIME,ACCESS]			:=	"DATETIME",
SQL_TYPES[SQL_TIME_FORMAT,ACCESS]	:=	"'%H:%M:%S'")

// MYSQL
claire/MYSQL :: 3
(SQL_TYPES[SQL_CHAR,MYSQL]				:=	"CHAR(~P)",
SQL_TYPES[SQL_NUMERIC,MYSQL]			:=	"NUMERIC(~P,~D)",
SQL_TYPES[SQL_DECIMAL,MYSQL]			:=	"DECIMAL(~P,~D)",
SQL_TYPES[SQL_INTEGER,MYSQL]			:=	"INTEGER",
SQL_TYPES[SQL_SMALLINT,MYSQL]			:=	"SMALLINT",
SQL_TYPES[SQL_FLOAT,MYSQL]				:=	"FLOAT(~P)",
SQL_TYPES[SQL_REAL,MYSQL]				:=	"REAL",
SQL_TYPES[SQL_DOUBLE,MYSQL]				:=	"DOUBLE PRECISION",
SQL_TYPES[SQL_VARCHAR,MYSQL]			:=	"VARCHAR(~P)",
SQL_TYPES[SQL_TEXT,MYSQL]				:=	"TEXT",
SQL_TYPES[SQL_BLOB,MYSQL]				:=	"LONGBLOB",
SQL_TYPES[SQL_AUTOINCREMENT, MYSQL]		:= "int AUTO_INCREMENT PRIMARY KEY",
SQL_TYPES[SQL_QUOTEREPLACEMENT,MYSQL]	:=	"\\'",
SQL_TYPES[SQL_ANTISLASHREPLACEMENT,MYSQL]	:=	"\\",

SQL_TYPES[SQL_TIMESTAMP,MYSQL]			:=	"DATETIME",
SQL_TYPES[SQL_TIMESTAMP_FORMAT,MYSQL]	:=	"'%Y-%m-%d %H:%M:%S'",

SQL_TYPES[SQL_DATE,MYSQL]			:=	"DATE",
SQL_TYPES[SQL_DATE_FORMAT,MYSQL]	:=	"'%Y-%m-%d'",

SQL_TYPES[SQL_TIME,MYSQL]			:=	"TIME",
SQL_TYPES[SQL_TIME_FORMAT,MYSQL]	:=	"'%H:%M:%S'",

SQL_TYPES[SQL_PASSWORD,MYSQL]	:=	"MD5"
)


// MSSQL SERVER
claire/MSSQL :: 4
(SQL_TYPES[SQL_CHAR,MSSQL]				:=	"CHAR(~P)",
SQL_TYPES[SQL_NUMERIC,MSSQL]			:=	"INT",
SQL_TYPES[SQL_DECIMAL,MSSQL]			:=	"INT",
SQL_TYPES[SQL_INTEGER,MSSQL]			:=	"INT",
SQL_TYPES[SQL_SMALLINT,MSSQL]			:=	"SMALLINT",
SQL_TYPES[SQL_FLOAT,MSSQL]				:=	"FLOAT",
SQL_TYPES[SQL_REAL,MSSQL]				:=	"FLOAT",
SQL_TYPES[SQL_DOUBLE,MSSQL]				:=	"FLOAT",
SQL_TYPES[SQL_VARCHAR,MSSQL]			:=	"VARCHAR(~P)",
SQL_TYPES[SQL_TEXT,MSSQL]				:=	"TEXT",
SQL_TYPES[SQL_BLOB,MSSQL]				:=	"NTEXT",
SQL_TYPES[SQL_TIMESTAMP,MSSQL]			:=	"DATETIME",
SQL_TYPES[SQL_AUTOINCREMENT, MSSQL]		:= 	"INT IDENTITY(1,1)",
SQL_TYPES[SQL_QUOTEREPLACEMENT,MSSQL]	:=	"''",
SQL_TYPES[SQL_ANTISLASHREPLACEMENT,MSSQL]	:=	"\\",

SQL_TYPES[SQL_TIMESTAMP,MSSQL]			:=	"DATETIME",
SQL_TYPES[SQL_TIMESTAMP_FORMAT,MSSQL]	:=	"'%Y-%m-%d %H:%M:%S'",

SQL_TYPES[SQL_DATE,MSSQL]			:=	"DATETIME",
SQL_TYPES[SQL_DATE_FORMAT,MSSQL]	:=	"'%Y-%m-%d'",

SQL_TYPES[SQL_TIME,MSSQL]			:=	"DATETIME",
SQL_TYPES[SQL_TIME_FORMAT,MSSQL]	:=	"'%H:%M:%S'")



// PGSQL
claire/PGSQL :: 5
(SQL_TYPES[SQL_CHAR,PGSQL]				:=	"CHAR(~P)",
SQL_TYPES[SQL_NUMERIC,PGSQL]			:=	"DOUBLE PRECISION",
SQL_TYPES[SQL_DECIMAL,PGSQL]			:=	"DECIMAL(~P,~D)",
SQL_TYPES[SQL_INTEGER,PGSQL]			:=	"INTEGER",
SQL_TYPES[SQL_SMALLINT,PGSQL]			:=	"SMALLINT",
SQL_TYPES[SQL_FLOAT,PGSQL]				:=	"DOUBLE PRECISION",
SQL_TYPES[SQL_REAL,PGSQL]				:=	"DOUBLE PRECISION",
SQL_TYPES[SQL_DOUBLE,PGSQL]				:=	"DOUBLE PRECISION",
SQL_TYPES[SQL_VARCHAR,PGSQL]			:=	"VARCHAR(~P)",
SQL_TYPES[SQL_TEXT,PGSQL]				:=	"TEXT",
SQL_TYPES[SQL_BLOB,PGSQL]				:=	"BYTEA",
SQL_TYPES[SQL_AUTOINCREMENT, PGSQL]		:= "SERIAL",
SQL_TYPES[SQL_QUOTEREPLACEMENT,PGSQL]	:=	"''",
SQL_TYPES[SQL_ANTISLASHREPLACEMENT,PGSQL]	:=	"\\\\",

SQL_TYPES[SQL_TIMESTAMP,PGSQL]			:=	"TIMESTAMP",
SQL_TYPES[SQL_TIMESTAMP_FORMAT,PGSQL]	:=	"'%Y-%m-%d %H:%M:%S'",

SQL_TYPES[SQL_DATE,PGSQL]			:=	"DATE",
SQL_TYPES[SQL_DATE_FORMAT,PGSQL]	:=	"'%Y-%m-%d'",

SQL_TYPES[SQL_TIME,PGSQL]			:=	"TIME",
SQL_TYPES[SQL_TIME_FORMAT,PGSQL]	:=	"'%H:%M:%S'",

SQL_TYPES[SQL_PASSWORD,PGSQL]	:=	"md5"
)




SQL_DRIVERS			:: {ODBC, ORACLE, ACCESS, MYSQL, MSSQL, PGSQL}
